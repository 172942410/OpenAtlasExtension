diff --git a/tools/aapt/CacheUpdater.h b/tools/aapt/CacheUpdater.h
index 0e65589..6a00777 100644
--- a/tools/aapt/CacheUpdater.h
+++ b/tools/aapt/CacheUpdater.h
@@ -77,7 +77,7 @@ public:
                 existsPath.appendPath(toCreate.walkPath(&remains));
                 toCreate = remains;
 #ifdef HAVE_MS_C_RUNTIME
-                _mkdir(existsPath.string());
+                mkdir(existsPath.string());
 #else
                 mkdir(existsPath.string(), S_IRUSR|S_IWUSR|S_IXUSR|S_IRGRP|S_IXGRP);
 #endif
@@ -104,4 +104,4 @@ private:
     Bundle* bundle;
 };
 
-#endif // CACHE_UPDATER_H
\ No newline at end of file
+#endif // CACHE_UPDATER_Hdiff --git a/tools/aapt/Main.cpp b/tools/aapt/Main.cpp
index 977226b..f14c683 100644
--- a/tools/aapt/Main.cpp
+++ b/tools/aapt/Main.cpp
@@ -18,7 +18,7 @@
 using namespace android;
 
 static const char* gProgName = "aapt";
-
+int pkgIdOffset=0x7f;
 /*
  * When running under Cygwin on Windows, this will convert slash-based
  * paths into back-slash-based ones. Otherwise the ApptAssets file comparisons
@@ -135,6 +135,7 @@ void usage(void)
         "   -0  specifies an additional extension for which such files will not\n"
         "       be stored compressed in the .apk.  An empty string means to not\n"
         "       compress any files at all.\n"
+        "  --pkg-id-offset hack package res offset ,default is 0x7f\n"
         "   --debug-mode\n"
         "       inserts android:debuggable=\"true\" in to the application node of the\n"
         "       manifest, making the application debuggable even on production devices.\n"
@@ -474,15 +475,28 @@ int main(int argc, char* const argv[])
             case '-':
                 if (strcmp(cp, "-debug-mode") == 0) {
                     bundle.setDebugMode(true);
-                } else if (strcmp(cp, "-min-sdk-version") == 0) {
-                    argc--;
-                    argv++;
-                    if (!argc) {
-                        fprintf(stderr, "ERROR: No argument supplied for '--min-sdk-version' option\n");
-                        wantUsage = true;
-                        goto bail;
-                    }
-                    bundle.setMinSdkVersion(argv[0]);
+                }
+                 else   if (strcmp(cp, "-pkg-id-offset") == 0) {
+                  argc--;
+                  argv++;
+                  if (!argc) {
+                    fprintf(stderr, "ERROR: No argument supplied for '-pkgIdOffset' option\n");
+                    wantUsage = true;
+                    goto bail;
+                  }
+                  //bundle.setTargetSdkVersion(argv[0]);
+
+                  pkgIdOffset=strtol(argv[0],NULL,16);
+                }
+                 else if (strcmp(cp, "-min-sdk-version") == 0) {
+                  argc--;
+                  argv++;
+                  if (!argc) {
+                    fprintf(stderr, "ERROR: No argument supplied for '-pkgIdOffset' option\n");
+                    wantUsage = true;
+                    goto bail;
+                  }
+                  bundle.setTargetSdkVersion(argv[0]);
                 } else if (strcmp(cp, "-target-sdk-version") == 0) {
                     argc--;
                     argv++;
@@ -538,7 +552,14 @@ int main(int argc, char* const argv[])
                         wantUsage = true;
                         goto bail;
                     }
-                    bundle.setCustomPackage(argv[0]);
+                    char * cpkg=argv[0];//bunny
+                    char resOffset[5]={0};
+                    strncpy(resOffset,cpkg+strlen(cpkg)-4,4);
+                    if(resOffset[0]=='0'&&resOffset[1]=='x'){
+                      pkgIdOffset=strtol(resOffset,NULL,16);
+                    }
+                    fprintf(stderr, "XXXXXXXXXXXXXXXXXresOffset %s \n",resOffset);
+                    bundle.setCustomPackage(cpkg);
                 } else if (strcmp(cp, "-extra-packages") == 0) {
                     argc--;
                     argv++;diff --git a/tools/aapt/Main.h b/tools/aapt/Main.h
index a6b39ac..d3d8c7a 100644
--- a/tools/aapt/Main.h
+++ b/tools/aapt/Main.h
@@ -21,7 +21,7 @@
 #if BENCHMARK
     #include <time.h>
 #endif /* BENCHMARK */
-
+extern int pkgIdOffset;//TODO  bunny
 extern int doVersion(Bundle* bundle);
 extern int doList(Bundle* bundle);
 extern int doDump(Bundle* bundle);diff --git a/tools/aapt/Resource.cpp b/tools/aapt/Resource.cpp
index 08ad7a0..dea19f9 100644
--- a/tools/aapt/Resource.cpp
+++ b/tools/aapt/Resource.cpp
@@ -2187,7 +2187,7 @@ status_t writeResourceSymbols(Bundle* bundle, const sp<AaptAssets>& assets,
                     String8 part(last, s-last);
                     dest.appendPath(part);
 #ifdef HAVE_MS_C_RUNTIME
-                    _mkdir(dest.string());
+                    mkdir(dest.string());
 #else
                     mkdir(dest.string(), S_IRUSR|S_IWUSR|S_IXUSR|S_IRGRP|S_IXGRP);
 #endifdiff --git a/tools/aapt/ResourceTable.cpp b/tools/aapt/ResourceTable.cpp
index f2e5254..cc5f876 100644
--- a/tools/aapt/ResourceTable.cpp
+++ b/tools/aapt/ResourceTable.cpp
@@ -9,7 +9,7 @@
 #include "XMLNode.h"
 #include "ResourceFilter.h"
 #include "ResourceIdCache.h"
-
+#include "Main.h"
 #include <androidfw/ResourceTypes.h>
 #include <utils/ByteOrder.h>
 #include <stdarg.h>
@@ -25,7 +25,7 @@ status_t compileXmlFile(const sp<AaptAssets>& assets,
     if (root == NULL) {
         return UNKNOWN_ERROR;
     }
-    
+
     return compileXmlFile(assets, root, target, table, options);
 }
 
@@ -39,7 +39,7 @@ status_t compileXmlFile(const sp<AaptAssets>& assets,
     if (root == NULL) {
         return UNKNOWN_ERROR;
     }
-    
+
     return compileXmlFile(assets, root, outTarget, table, options);
 }
 
@@ -60,7 +60,7 @@ status_t compileXmlFile(const sp<AaptAssets>& assets,
     }
 
     bool hasErrors = false;
-    
+
     if ((options&XML_COMPILE_ASSIGN_ATTRIBUTE_IDS) != 0) {
         status_t err = root->assignResourceIds(assets, table);
         if (err != NO_ERROR) {
@@ -76,7 +76,7 @@ status_t compileXmlFile(const sp<AaptAssets>& assets,
     if (hasErrors) {
         return UNKNOWN_ERROR;
     }
-    
+
     NOISY(printf("Input XML Resource:\n"));
     NOISY(root->print());
     err = root->flatten(target,
@@ -92,7 +92,7 @@ status_t compileXmlFile(const sp<AaptAssets>& assets,
         printXMLBlock(&tree));
 
     target->setCompressionMethod(ZipEntry::kCompressDeflated);
-    
+
     return err;
 }
 
@@ -211,7 +211,7 @@ static String16 mayOrMust(int type, int flags)
     if ((type&(~flags)) == 0) {
         return String16("<p>Must");
     }
-    
+
     return String16("<p>May");
 }
 
@@ -250,7 +250,7 @@ struct PendingAttribute
     String16 comment;
     bool hasErrors;
     bool added;
-    
+
     PendingAttribute(String16 _package, const sp<AaptFile>& in,
             ResXMLTree& block, bool _appendComment)
         : myPackage(_package)
@@ -261,7 +261,7 @@ struct PendingAttribute
         , added(false)
     {
     }
-    
+
     status_t createIfNeeded(ResourceTable* outTable)
     {
         if (added || hasErrors) {
@@ -270,14 +270,14 @@ struct PendingAttribute
         added = true;
 
         String16 attr16("attr");
-        
+
         if (outTable->hasBagOrEntry(myPackage, attr16, ident)) {
             sourcePos.error("Attribute \"%s\" has already been defined\n",
                     String8(ident).string());
             hasErrors = true;
             return UNKNOWN_ERROR;
         }
-        
+
         char numberStr[16];
         sprintf(numberStr, "%d", type);
         status_t err = outTable->addBag(sourcePos, myPackage,
@@ -303,7 +303,7 @@ static status_t compileAttribute(const sp<AaptFile>& in,
                                  bool inStyleable = false)
 {
     PendingAttribute attr(myPackage, in, block, inStyleable);
-    
+
     const String16 attr16("attr");
     const String16 id16("id");
 
@@ -314,7 +314,7 @@ static status_t compileAttribute(const sp<AaptFile>& in,
     ResXMLTree::event_code_t code;
     size_t len;
     status_t err;
-    
+
     ssize_t identIdx = block.indexOfAttribute(NULL, "name");
     if (identIdx >= 0) {
         attr.ident = String16(block.getAttributeStringValue(identIdx, &len));
@@ -409,7 +409,7 @@ static status_t compileAttribute(const sp<AaptFile>& in,
     }
 
     String16 enumOrFlagsComment;
-    
+
     while ((code=block.next()) != ResXMLTree::END_DOCUMENT && code != ResXMLTree::BAD_DOCUMENT) {
         if (code == ResXMLTree::START_TAG) {
             uint32_t localType = 0;
@@ -425,7 +425,7 @@ static status_t compileAttribute(const sp<AaptFile>& in,
             }
 
             attr.createIfNeeded(outTable);
-            
+
             if (attr.type == ResTable_map::TYPE_ANY) {
                 // No type was explicitly stated, so supplying enum tags
                 // implicitly creates an enum or flag.
@@ -506,7 +506,7 @@ static status_t compileAttribute(const sp<AaptFile>& in,
                                                 "<colgroup align=\"left\" />\n"
                                                 "<tr><th>Constant</th><th>Value</th><th>Description</th></tr>"));
                 }
-                
+
                 enumOrFlagsComment.append(String16("\n<tr><td><code>"));
                 enumOrFlagsComment.append(itemIdent);
                 enumOrFlagsComment.append(String16("</code></td><td>"));
@@ -516,7 +516,7 @@ static status_t compileAttribute(const sp<AaptFile>& in,
                     enumOrFlagsComment.append(String16(block.getComment(&len)));
                 }
                 enumOrFlagsComment.append(String16("</td></tr>"));
-                
+
                 err = outTable->addBag(SourcePos(in->getPrintableSource(), block.getLineNumber()),
                                        myPackage,
                                        attr16, attr.ident, String16(""),
@@ -546,11 +546,11 @@ static status_t compileAttribute(const sp<AaptFile>& in,
             }
         }
     }
-    
+
     if (!attr.hasErrors && attr.added) {
         appendTypeInfo(outTable, myPackage, attr16, attr.ident, attr.type, gFormatFlags);
     }
-    
+
     if (!attr.hasErrors && enumOrFlagsComment.size() > 0) {
         enumOrFlagsComment.append(String16("\n</table>"));
         outTable->appendTypeComment(myPackage, attr16, attr.ident, enumOrFlagsComment);
@@ -583,7 +583,7 @@ status_t parseAndAddBag(Bundle* bundle,
 {
     status_t err;
     const String16 item16("item");
-    
+
     String16 str;
     Vector<StringPool::entry_style_span> spans;
     err = parseStyledString(bundle, in->getPrintableSource().string(),
@@ -592,7 +592,7 @@ status_t parseAndAddBag(Bundle* bundle,
     if (err != NO_ERROR) {
         return err;
     }
-    
+
     NOISY(printf("Adding resource bag entry l=%c%c c=%c%c orien=%d d=%d "
                  " pid=%s, bag=%s, id=%s: %s\n",
                  config.language[0], config.language[1],
@@ -685,7 +685,7 @@ status_t parseAndAddEntry(Bundle* bundle,
                             curTag, &str, curIsStyled ? &spans : NULL,
                             isFormatted, pseudolocalize);
 
-    if (err < NO_ERROR) { 
+    if (err < NO_ERROR) {
         return err;
     }
 
@@ -895,7 +895,7 @@ status_t compileResourceFile(Bundle* bundle,
 
             } else if (strcmp16(block.getElementName(&len), public16.string()) == 0) {
                 SourcePos srcPos(in->getPrintableSource(), block.getLineNumber());
-            
+
                 String16 type;
                 ssize_t typeIdx = block.indexOfAttribute(NULL, "type");
                 if (typeIdx < 0) {
@@ -967,7 +967,7 @@ status_t compileResourceFile(Bundle* bundle,
 
             } else if (strcmp16(block.getElementName(&len), public_padding16.string()) == 0) {
                 SourcePos srcPos(in->getPrintableSource(), block.getLineNumber());
-            
+
                 String16 type;
                 ssize_t typeIdx = block.indexOfAttribute(NULL, "type");
                 if (typeIdx < 0) {
@@ -1028,7 +1028,7 @@ status_t compileResourceFile(Bundle* bundle,
                             start, end);
                     hasErrors = localHasErrors = true;
                 }
-                
+
                 String16 comment(
                     block.getComment(&len) ? block.getComment(&len) : nulStr);
                 for (uint32_t curIdent=start; curIdent<=end; curIdent++) {
@@ -1039,7 +1039,7 @@ status_t compileResourceFile(Bundle* bundle,
                     char buf[64];
                     sprintf(buf, "%d", (int)(end-curIdent+1));
                     curName.append(String16(buf));
-                    
+
                     err = outTable->addEntry(srcPos, myPackage, type, curName,
                                              String16("padding"), NULL, &curParams, false,
                                              ResTable_map::TYPE_STRING, overwrite);
@@ -1099,7 +1099,7 @@ status_t compileResourceFile(Bundle* bundle,
 
             } else if (strcmp16(block.getElementName(&len), java_symbol16.string()) == 0) {
                 SourcePos srcPos(in->getPrintableSource(), block.getLineNumber());
-            
+
                 String16 type;
                 ssize_t typeIdx = block.indexOfAttribute(NULL, "type");
                 if (typeIdx < 0) {
@@ -1142,7 +1142,7 @@ status_t compileResourceFile(Bundle* bundle,
 
             } else if (strcmp16(block.getElementName(&len), add_resource16.string()) == 0) {
                 SourcePos srcPos(in->getPrintableSource(), block.getLineNumber());
-            
+
                 String16 typeName;
                 ssize_t typeIdx = block.indexOfAttribute(NULL, "type");
                 if (typeIdx < 0) {
@@ -1169,10 +1169,10 @@ status_t compileResourceFile(Bundle* bundle,
                     }
                 }
                 continue;
-                
+
             } else if (strcmp16(block.getElementName(&len), declare_styleable16.string()) == 0) {
                 SourcePos srcPos(in->getPrintableSource(), block.getLineNumber());
-                                
+
                 String16 ident;
                 ssize_t identIdx = block.indexOfAttribute(NULL, "name");
                 if (identIdx < 0) {
@@ -1194,7 +1194,7 @@ status_t compileResourceFile(Bundle* bundle,
                         srcPos.error("Unable to create symbols!\n");
                         return UNKNOWN_ERROR;
                     }
-                    
+
                     String16 comment(
                         block.getComment(&len) ? block.getComment(&len) : nulStr);
                     styleSymbols->appendComment(String8(ident), comment, srcPos);
@@ -1311,7 +1311,7 @@ status_t compileResourceFile(Bundle* bundle,
                         formatted.setTo(block.getAttributeStringValue(i, &length));
                     }
                 }
-                
+
                 if (name.size() > 0) {
                     if (translatable == false16) {
                         curIsFormatted = false;
@@ -1458,7 +1458,7 @@ status_t compileResourceFile(Bundle* bundle,
             }
 
             String16 comment(block.getComment(&len) ? block.getComment(&len) : nulStr);
-            
+
             if (curIsBag) {
                 // Figure out the parent of this bag...
                 String16 parentIdent;
@@ -1481,7 +1481,7 @@ status_t compileResourceFile(Bundle* bundle,
                         hasErrors = localHasErrors = true;
                     }
                 }
-                
+
                 ssize_t elmIndex = 0;
                 char elmIndexStr[14];
                 while ((code=block.next()) != ResXMLTree::END_DOCUMENT
@@ -1560,7 +1560,7 @@ status_t compileResourceFile(Bundle* bundle,
                                         curIsFormatted, product, true, overwrite, outTable);
 #endif
                             }
-                        } 
+                        }
                         if (err != NO_ERROR) {
                             hasErrors = localHasErrors = true;
                         }
@@ -1775,7 +1775,7 @@ status_t ResourceTable::addEntry(const SourcePos& sourcePos,
     if (rid != 0) {
         return NO_ERROR;
     }
-    
+
 #if 0
     if (name == String16("left")) {
         printf("Adding entry left: file=%s, line=%d, type=%s, value=%s\n",
@@ -1816,7 +1816,7 @@ status_t ResourceTable::startBag(const SourcePos& sourcePos,
     if (rid != 0) {
         return NO_ERROR;
     }
-    
+
 #if 0
     if (name == String16("left")) {
         printf("Adding bag left: file=%s, line=%d, type=%s\n",
@@ -1844,7 +1844,7 @@ status_t ResourceTable::startBag(const SourcePos& sourcePos,
     if (e == NULL) {
         return UNKNOWN_ERROR;
     }
-    
+
     // If a parent is explicitly specified, set it.
     if (bagParent.size() > 0) {
         e->setParent(bagParent);
@@ -1854,7 +1854,7 @@ status_t ResourceTable::startBag(const SourcePos& sourcePos,
         return result;
     }
 
-    if (overlay && replace) { 
+    if (overlay && replace) {
         return e->emptyBag(sourcePos);
     }
     return result;
@@ -2005,7 +2005,7 @@ bool ResourceTable::appendTypeComment(const String16& package,
     if (comment.size() <= 0) {
         return true;
     }
-    
+
     sp<Package> p = mPackages.valueFor(package);
     if (p != NULL) {
         sp<Type> t = p->getTypes().valueFor(type);
@@ -2079,7 +2079,7 @@ uint32_t ResourceTable::getResId(const String16& package,
                 return 0;
             }
         }
-        
+
         if (Res_INTERNALID(rid)) {
             return ResourceIdCache::store(package, type, name, onlyPublic, rid);
         }
@@ -2204,7 +2204,7 @@ bool ResourceTable::stringToValue(Res_value* outValue, StringPool* pool,
             // Caller will fill this in later.
             outValue->data = 0;
         }
-    
+
         if (outStr) {
             *outStr = finalStr;
         }
@@ -2541,7 +2541,7 @@ status_t ResourceTable::addSymbols(const sp<AaptSymbols>& outSymbols) {
                 }
                 if (Res_GETPACKAGE(rid) == (size_t)(p->getAssignedId()-1)) {
                     typeSymbols->addSymbol(String8(c->getName()), rid, c->getPos());
-                    
+
                     String16 comment(c->getComment());
                     typeSymbols->appendComment(String8(c->getName()), comment, c->getPos());
                     //printf("Type symbol [%08x] %s comment: %s\n", rid,
@@ -2607,7 +2607,7 @@ ResourceTable::validateLocalizations(void)
             const char* allConfigs = mBundle->getConfigurations();
             const char* start = allConfigs;
             const char* comma;
-            
+
             do {
                 String8 config;
                 comma = strchr(start, ',');
@@ -2753,7 +2753,7 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
     }
 
     ssize_t strAmt = 0;
-    
+
     // Now build the array of package chunks.
     Vector<sp<AaptFile> > flatPackages;
     for (pi=0; pi<N; pi++) {
@@ -2821,7 +2821,7 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
             // the item at t->getOrderedConfigs().itemAt(i).
             Vector<bool> validResources;
             validResources.insertAt(false, 0, N);
-            
+
             // First write the typeSpec chunk, containing information about
             // each resource entry in this type.
             {
@@ -2839,7 +2839,7 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
                 tsHeader->header.size = htodl(typeSpecSize);
                 tsHeader->id = ti+1;
                 tsHeader->entryCount = htodl(N);
-                
+
                 uint32_t* typeSpecFlags = (uint32_t*)
                     (((uint8_t*)data->editData())
                         + typeSpecStart + sizeof(ResTable_typeSpec));
@@ -2865,13 +2865,13 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
                     }
                 }
             }
-            
+
             // We need to write one type chunk for each configuration for
             // which we have entries in this type.
             const size_t NC = t->getUniqueConfigs().size();
-            
+
             const size_t typeSize = sizeof(ResTable_type) + sizeof(uint32_t)*N;
-            
+
             for (size_t ci=0; ci<NC; ci++) {
                 ConfigDescription config = t->getUniqueConfigs().itemAt(ci);
 
@@ -2897,11 +2897,11 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
                       config.screenWidthDp,
                       config.screenHeightDp,
                       config.layoutDirection));
-                      
+
                 if (filterable && !filter.match(config)) {
                     continue;
                 }
-                
+
                 const size_t typeStart = data->getSize();
 
                 ResTable_type* tHeader = (ResTable_type*)
@@ -3007,7 +3007,7 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
             return err;
         }
     }
-    
+
     ssize_t strStart = dest->getSize();
     err = valueStrings.writeStringBlock(dest);
     if (err != NO_ERROR) {
@@ -3020,7 +3020,7 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
     fprintf(stderr, "**** value strings: %d\n", amt);
     fprintf(stderr, "**** total strings: %d\n", strAmt);
     #endif
-    
+
     for (pi=0; pi<flatPackages.size(); pi++) {
         err = dest->writeData(flatPackages[pi]->getData(),
                               flatPackages[pi]->getSize());
@@ -3041,7 +3041,7 @@ status_t ResourceTable::flatten(Bundle* bundle, const sp<AaptFile>& dest)
     fprintf(stderr, "**** total resource table size: %d / %d%% strings\n",
         dest->getSize(), (strAmt*100)/dest->getSize());
     #endif
-    
+
     return NO_ERROR;
 }
 
@@ -3194,7 +3194,7 @@ status_t ResourceTable::Entry::addToBag(const SourcePos& sourcePos,
     }
 
     Item item(sourcePos, isId, value, style, format);
-    
+
     // XXX NOTE: there is an error if you try to have a bag with two keys,
     // one an attr and one an id, with the same name.  Not something we
     // currently ever have to worry about.
@@ -3275,7 +3275,7 @@ status_t ResourceTable::Entry::assignResourceIds(ResourceTable* table,
                                                  const String16& package)
 {
     bool hasErrors = false;
-    
+
     if (mType == TYPE_BAG) {
         const char* errorMsg;
         const String16 style16("style");
@@ -3415,7 +3415,7 @@ ssize_t ResourceTable::Entry::flatten(Bundle* bundle, const sp<AaptFile>& data,
             items.add(it.bagKeyId, &it);
         }
         N = items.size();
-        
+
         ResTable_map_entry mapHeader;
         memcpy(&mapHeader, &header, sizeof(header));
         mapHeader.size = htods(sizeof(mapHeader));
@@ -3548,10 +3548,10 @@ sp<ResourceTable::Entry> ResourceTable::Type::getEntry(const String16& entry,
             c->setEntryIndex(pos);
         }
     }
-    
+
     ConfigDescription cdesc;
     if (config) cdesc = *config;
-    
+
     sp<Entry> e = c->getEntries().valueFor(cdesc);
     if (e == NULL) {
         if (config != NULL) {
@@ -3599,9 +3599,9 @@ sp<ResourceTable::Entry> ResourceTable::Type::getEntry(const String16& entry,
         }
         */
     }
-    
+
     mUniqueConfigs.add(cdesc);
-    
+
     return e;
 }
 
@@ -3667,12 +3667,12 @@ status_t ResourceTable::Type::applyPublicEntryOrder()
     }
 
     //printf("Copying back in %d non-public configs, have %d\n", N, origOrder.size());
-    
+
     if (N != origOrder.size()) {
         printf("Internal error: remaining private symbol count mismatch\n");
         N = origOrder.size();
     }
-    
+
     j = 0;
     for (i=0; i<N; i++) {
         sp<ConfigList> e = origOrder.itemAt(i);
@@ -3814,7 +3814,7 @@ sp<ResourceTable::Package> ResourceTable::getPackage(const String16& package)
                 return NULL;
             }
             mHaveAppPackage = true;
-            p = new Package(package, 127);
+            p = new Package(package, pkgIdOffset);//TODO  bunny inject
         } else {
             p = new Package(package, mNextPackageId);
         }
@@ -3892,7 +3892,7 @@ sp<const ResourceTable::Entry> ResourceTable::getEntry(uint32_t resID,
         fprintf(stderr, "warning: Entry not found for resource #%08x\n", resID);
         return NULL;
     }
-    
+
     ConfigDescription cdesc;
     if (config) cdesc = *config;
     sp<Entry> e = c->getEntries().valueFor(cdesc);
@@ -3900,7 +3900,7 @@ sp<const ResourceTable::Entry> ResourceTable::getEntry(uint32_t resID,
         fprintf(stderr, "warning: Entry configuration not found for resource #%08x\n", resID);
         return NULL;
     }
-    
+
     return e;
 }
 diff --git a/tools/aapt/ResourceTable.h b/tools/aapt/ResourceTable.h
index a3e0666..abd8435 100644
--- a/tools/aapt/ResourceTable.h
+++ b/tools/aapt/ResourceTable.h
@@ -25,7 +25,7 @@ enum {
     XML_COMPILE_STRIP_WHITESPACE = 1<<3,
     XML_COMPILE_STRIP_RAW_VALUES = 1<<4,
     XML_COMPILE_UTF8 = 1<<5,
-    
+
     XML_COMPILE_STANDARD_RESOURCE =
             XML_COMPILE_STRIP_COMMENTS | XML_COMPILE_ASSIGN_ATTRIBUTE_IDS
             | XML_COMPILE_STRIP_WHITESPACE | XML_COMPILE_STRIP_RAW_VALUES
@@ -137,7 +137,7 @@ public:
                     bool overlay = false,
                     bool replace = false,
                     bool isId = false);
-    
+
     status_t addBag(const SourcePos& pos,
                     const String16& package,
                     const String16& type,
@@ -174,10 +174,10 @@ public:
                            const String16& type,
                            const String16& name,
                            const String16& comment);
-    
+
     void canAddEntry(const SourcePos& pos,
         const String16& package, const String16& type, const String16& name);
-        
+
     size_t size() const;
     size_t numLocalResources() const;
     bool hasResources() const;
@@ -207,7 +207,7 @@ public:
                       bool onlyPublic = true) const;
 
     static bool isValidResourceName(const String16& s);
-    
+
     bool stringToValue(Res_value* outValue, StringPool* pool,
                        const String16& str,
                        bool preserveSpaces, bool coerceType,
@@ -302,7 +302,7 @@ public:
             TYPE_ITEM,
             TYPE_BAG
         };
-        
+
         String16 getName() const { return mName; }
         type getType() const { return mType; }
 
@@ -312,7 +312,7 @@ public:
         status_t makeItABag(const SourcePos& sourcePos);
 
         status_t emptyBag(const SourcePos& sourcePos);
- 
+
         status_t setItem(const SourcePos& pos,
                          const String16& value,
                          const Vector<StringPool::entry_style_span>* style = NULL,
@@ -358,35 +358,35 @@ public:
         uint32_t mParentId;
         SourcePos mPos;
     };
-    
+
     class ConfigList : public RefBase {
     public:
         ConfigList(const String16& name, const SourcePos& pos)
             : mName(name), mPos(pos), mPublic(false), mEntryIndex(-1) { }
         virtual ~ConfigList() { }
-        
+
         String16 getName() const { return mName; }
         const SourcePos& getPos() const { return mPos; }
-        
+
         void appendComment(const String16& comment, bool onlyIfEmpty = false);
         const String16& getComment() const { return mComment; }
-        
+
         void appendTypeComment(const String16& comment);
         const String16& getTypeComment() const { return mTypeComment; }
-        
+
         // Index of this entry in its Type.
         int32_t getEntryIndex() const { return mEntryIndex; }
         void setEntryIndex(int32_t index) { mEntryIndex = index; }
-        
+
         void setPublic(bool pub) { mPublic = pub; }
         bool getPublic() const { return mPublic; }
         void setPublicSourcePos(const SourcePos& pos) { mPublicSourcePos = pos; }
         const SourcePos& getPublicSourcePos() { return mPublicSourcePos; }
-        
+
         void addEntry(const ResTable_config& config, const sp<Entry>& entry) {
             mEntries.add(config, entry);
         }
-        
+
         const DefaultKeyedVector<ConfigDescription, sp<Entry> >& getEntries() const { return mEntries; }
     private:
         const String16 mName;
@@ -398,7 +398,7 @@ public:
         int32_t mEntryIndex;
         DefaultKeyedVector<ConfigDescription, sp<Entry> > mEntries;
     };
-    
+
     class Public {
     public:
         Public() : sourcePos(), ident(0) { }
@@ -410,19 +410,19 @@ public:
         Public(const Public& o) : sourcePos(o.sourcePos),
             comment(o.comment), ident(o.ident) { }
         ~Public() { }
-        
+
         Public& operator=(const Public& o) {
             sourcePos = o.sourcePos;
             comment = o.comment;
             ident = o.ident;
             return *this;
         }
-        
+
         SourcePos   sourcePos;
         String16    comment;
         uint32_t    ident;
     };
-    
+
     class Type : public RefBase {
     public:
         Type(const String16& name, const SourcePos& pos)
@@ -433,9 +433,9 @@ public:
         status_t addPublic(const SourcePos& pos,
                            const String16& name,
                            const uint32_t ident);
-                           
+
         void canAddEntry(const String16& name);
-        
+
         String16 getName() const { return mName; }
         sp<Entry> getEntry(const String16& entry,
                            const SourcePos& pos,
@@ -454,12 +454,12 @@ public:
         status_t applyPublicEntryOrder();
 
         const SortedVector<ConfigDescription>& getUniqueConfigs() const { return mUniqueConfigs; }
-        
+
         const DefaultKeyedVector<String16, sp<ConfigList> >& getConfigs() const { return mConfigs; }
         const Vector<sp<ConfigList> >& getOrderedConfigs() const { return mOrderedConfigs; }
 
         const SortedVector<String16>& getCanAddEntries() const { return mCanAddEntries; }
-        
+
         const SourcePos& getPos() const { return mPos; }
     private:
         String16 mName;
@@ -549,7 +549,7 @@ private:
     size_t mNumLocal;
     SourcePos mCurrentXmlPos;
     Bundle* mBundle;
-    
+
     // key = string resource name, value = set of locales in which that name is defined
     map<String16, set<String8> > mLocalizations;
 };diff --git a/tools/aapt/tests/plurals/run.sh b/tools/aapt/tests/plurals/run.sh
old mode 100755
new mode 100644